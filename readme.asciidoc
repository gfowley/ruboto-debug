= Ruboto Project Debugging _(the hard way)_
:toc:
:toc-placement: preamble

This tutorial describes how to enable remote debugging for a Ruboto app using ruby-debug and its command-line debugger client. Some changes to the Ruboto gem are required. This tutorial will be updated as these changes make their way into the distributed gems and development Ruboto of app debugging continues. This should become a simpler process providing more effective debugging.

== Ruboto project

Changes to Ruboto are needed to work with ruby-debug. For this tutorial a repository of a sample default Ruboto project with the required changes is available. This repository will always contain the changes described in this tutorial. Clone it locally.

[source,shell]
----
$ git clone https://github.com/gfowley/ruboto-debug
----

=== Dev environment

This project repository and this tutorial assume jruby-1.7.22 is being used locally and bundled in the application jruby jars.

[source,shell]
----
$ ruby -v
----
----
jruby 1.7.22 (1.9.3p551) 2015-08-20 c28f492 on Java HotSpot(TM) 64-Bit Server VM 1.8.0_51-b16 +jit [linux-amd64]
----

[source,shell]
----
$ ls libs
----
----
bundle.jar  dx.jar  jruby-core-1.7.22.jar  jruby-stdlib-1.7.22.jar
----

RVM .ruby-* files implement a project ruby version and gemset.

.file .ruby-version
----
jruby-1.7.22
----

.file .ruby-gemset
----
ruboto-debug
----

[source,shell]
----
$ rvm current
----
----
jruby-1.7.22@ruboto-debug
----

=== Changes to Ruboto

The rake-debug gem specifies a non-default require path _cli_ in its gemspec. Handle this special case when creating bundle.jar in ruboto.rake.

.rakelib/ruboto.rake:748
[source,ruby]
----
require_path = gem_lib =~ /^ruby-debug-\d/ ? 'cli' : 'lib'
Dir.chdir "#{gem_lib}/#{require_path}" do
----

.rakelib/ruboto.rake:881
[source,ruby]
----
require_path = gem_dir =~ /ruby-debug-\d/ ? 'cli' : 'lib' 
`jar #{i == 0 ? 'c' : 'u'}f "#{BUNDLE_JAR}" -C "#{gem_dir}/#{require_path}" .`
----

[NOTE]
====
TODO: Get gem require paths from gemspec - GemSpecification#require_paths. Something like...
----
gem_spec = YAML.load `gem specification #{gem_name} --version #{gem_version} --yaml`
gem_spec.require_paths.each { |dir| ... }
----
====

Load RubyDebugService from bundle.jar at JRuby startup

.rakelib/ruboto.rake:818
[source,ruby]
----
elsif jar =~ %r{ruby_debug.jar$}
  jar_load_code = <<-END_CODE
require 'jruby'
puts 'Starting Ruby Debug Service'
public
Java::RubyDebugService.new.basicLoad(JRuby.runtime)
END_CODE
----

=== Permissions

When started in the application the debugger runs a TCP server to communicate with the debugger client. The application requires the _android.permission.INTERNET_ permission, otherwise an EACCES exception will be raised.
----
org.jruby.exceptions.RaiseException: (Errno::EACCES) bind(2)
   at org.jruby.ext.socket.RubyTCPServer.initialize(org/jruby/ext/socket/RubyTCPServer.java:124)
----

.AndroidManifest.xml
[source,xml]
----
<uses-permission android:name='android.permission.INTERNET'/>
----

=== Activity

To debug an activity, start the debugger for remote operation configured to wait for a connection from the debugger client. Once the debugger client is connected the application will contine execution after _Debugger.start_remote_ until the _debugger_ method is called. At that point the debugger client can debug the application. See the sample activity in the repository.

.src/debugging_activity.rb
[source,ruby]
----
require 'ruby-debug'

class DebuggingActivity

  def onCreate(bundle)
    super

    set_title 'Domo arigato, Mr Ruboto!'

    Debugger.wait_connection = true
    Debugger.start_remote         

    Thread.start do
      debugger
      puts "onCreate: debugger session begin"
      set_title 'Degugging Mr Ruboto!'
      puts "onCreate: debugger session end"
    end.join

    self.content_view = linear_layout :orientation => :vertical do
      @text_view = text_view :text => 'What hath Matz wrought?', :id => 42, 
        :layout => {:width => :match_parent},
        :gravity => :center, :text_size => 48.0
      button :text => 'M-x butterfly', 
        :layout => {:width => :match_parent},
        :id => 43, :on_click_listener => proc { butterfly }
    end
  end

  private

  def butterfly
    @text_view.text = 'What hath Matz wrought!'

    Thread.start do
      debugger
      puts "butterfly: debugger session begin"
      @text_view.text = 'Butterfly debugged!'
      puts "butterfly: debugger session end"
    end.join

    toast 'Flipped a bit via butterfly'
  end

end
----

[NOTE]
====
* The _debugger_ method is called from a separate thread, it does not seem to work when called from the UI thread.
* The debugger thread is joined so that any changes made when debugging will affect the code following.
* The debugger session ends when the debugger thread ends, all code to be debugged should be wrapped by the Thread.start block.
====

=== Bundle

Specify ruby-debug and depencency gem versions compatible with Ruboto.

The linecache gem supports Ruboto since version 1.3.1.
For details, see linecache issue: https://github.com/rocky/linecache/issues/4.

The ruby-debug gem supports Ruboto since version 0.10.6.
For details, see ruby-debug issue: https://github.com/ruby-debug/ruby-debug/pull/23

.Gemfile & Gemfile.apk
[source,ruby]
----
source 'https://rubygems.org'
gem 'columnize',       '~> 0.9.0'
gem 'linecache',       '~> 1.3.1'
gem 'ruby-debug-base', '~> 0.10.6'
gem 'ruby-debug',      '~> 0.10.6'
----

Install bundled gems in local dev environment.

[source,shell]
----
$ bundle
----
----
Fetching gem metadata from https://rubygems.org/....
Fetching version metadata from https://rubygems.org/..
Resolving dependencies...
Installing columnize 0.9.0
Installing linecache 1.3.1
Installing ruby-debug-base 0.10.6
Installing ruby-debug 0.10.6
Using bundler 1.10.6
Bundle complete! 4 Gemfile dependencies, 5 gems now installed.
Gems in the groups development and test were not installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
----

Verify that gems bundle for app.

[source,shell]
----
$ rake bundle
----
----
Jars have changed: bundle.jar
Generating /home/gerard/dev/ruboto-debug/libs/bundle.jar
Fetching gem metadata from https://rubygems.org/....
Fetching version metadata from https://rubygems.org/..
Resolving dependencies...
Using columnize 0.9.0
Using linecache 1.3.1
Using ruby-debug-base 0.10.6
Using ruby-debug 0.10.6
Using bundler 1.10.6
Found gems in /home/gerard/dev/ruboto-debug/bin/bundle/gems
----

=== Build and install app

NOTE: This tutorial has been tested on an x86-based emulator and API 19 only. Feedback regarding results on other emulators, APIs, and devices welcome.

Connect device or start emulator, verify adb communication.

[source,shell]
----
$ adb devices
----
----
List of devices attached 
emulator-5554   device
----

Build Ruboto app, bundle gems for app, verify that libs/bundle.jar is dexed, (re)install, and ready log capture.

[source,shell]
----
$ rake clean debug reinstall log
----
----
...
-dex:
    [apply] Result: 2
     [echo] The package contains too many methods.  Switching to multi-dex build.
     [echo] Converting compiled files and external libraries into /home/gerard/dev/ruboto-debug/bin (multi-dex)
     [echo] Dexing /home/gerard/dev/ruboto-debug/bin/classes and /home/gerard/dev/ruboto-debug/libs/jruby-stdlib-1.7.22.jar:/home/gerard
/dev/ruboto-debug/libs/jruby-core-1.7.22.jar:/home/gerard/dev/ruboto-debug/libs/dx.jar:/home/gerard/dev/ruboto-debug/libs/bundle.jar
...
----

=== Start app

Launch application on device. App will stop in onCreate method and wait for debugger client connection, device screen will be blank. Relevant log highlights include:

UnixSocketChannel warnings, triggered by RubyDebugService (harmless?).
----
20150901 155558.944000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155558.944000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155558.944000 E/dalvikvm( 1895): Could not find class 'jnr.unixsocket.UnixSocketChannel', referenced from method org.jruby.ext.socket.RubySocket.initFieldsFromDescriptor
20150901 155558.944000 W/dalvikvm( 1895): VFY: unable to resolve instanceof 1619 (Ljnr/unixsocket/UnixSocketChannel;) in Lorg/jruby/ext/socket/RubySocket;
20150901 155558.944000 D/dalvikvm( 1895): VFY: replacing opcode 0x20 at 0x0015
20150901 155558.945000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155558.945000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155558.945000 E/dalvikvm( 1895): Could not find class 'jnr.unixsocket.UnixSocketChannel', referenced from method org.jruby.ext.socket.RubySocket.doBind
20150901 155558.945000 W/dalvikvm( 1895): VFY: unable to resolve instanceof 1619 (Ljnr/unixsocket/UnixSocketChannel;) in Lorg/jruby/ext/socket/RubySocket;
20150901 155558.945000 D/dalvikvm( 1895): VFY: replacing opcode 0x20 at 0x0010
20150901 155558.945000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155558.945000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155558.945000 E/dalvikvm( 1895): Could not find class 'jnr.unixsocket.UnixSocketChannel', referenced from method org.jruby.ext.socket.RubySocket.doConnect
20150901 155558.945000 W/dalvikvm( 1895): VFY: unable to resolve instanceof 1619 (Ljnr/unixsocket/UnixSocketChannel;) in Lorg/jruby/ext/socket/RubySocket;
20150901 155558.945000 D/dalvikvm( 1895): VFY: replacing opcode 0x20 at 0x003d
20150901 155558.945000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155558.945000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155558.945000 I/dalvikvm( 1895): Could not find method jnr.unixsocket.UnixSocketChannel.open, referenced from method org.jruby.ext.socket.RubySocket.initChannel
20150901 155558.946000 W/dalvikvm( 1895): VFY: unable to resolve static method 10681: Ljnr/unixsocket/UnixSocketChannel;.open ()Ljnr/unixsocket/UnixSocketChannel;
20150901 155558.953000 D/dalvikvm( 1895): VFY: replacing opcode 0x71 at 0x0012
----

Start of RubyDebugService upon JRuby startup.
----
20150901 155559.012000 I/System.out( 1895): Starting Ruby Debug Service
----

MessageDigest MD2 warning (seems to be harmless).
----
20150901 155600.808000 W/System.err( 1895): java.security.NoSuchAlgorithmException: MessageDigest MD2 implementation not found
...
----

Tracing without --debug flag. According to ruby-debug docs this will prevent its line tracing feature from working.
----
20150901 155601.083000 I/System.out( 1895): file:/data/app/net.iqeo.debugging-1.apk!/ruby-debug-base.rb:196 warning: tracing (e.g. set_trace_func) will not capture all events without --debug flag
----

UnixSocketChannel warnings, triggered by _Debugger.start_remote_ (harmless?).
----
20150901 155601.117000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155601.117000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155601.117000 E/dalvikvm( 1895): Could not find class 'jnr.unixsocket.UnixSocketChannel', referenced from method org.jruby.ext.socket.SocketType.forChannel
20150901 155601.117000 W/dalvikvm( 1895): VFY: unable to resolve instanceof 1619 (Ljnr/unixsocket/UnixSocketChannel;) in Lorg/jruby/ext/socket/SocketType;
20150901 155601.117000 D/dalvikvm( 1895): VFY: replacing opcode 0x20 at 0x0015
20150901 155601.117000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155601.117000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155601.117000 E/dalvikvm( 1895): Could not find class 'jnr.unixsocket.UnixSocketChannel', referenced from method org.jruby.ext.socket.SocketType$4.toSocket
20150901 155601.117000 W/dalvikvm( 1895): VFY: unable to resolve check-cast 1619 (Ljnr/unixsocket/UnixSocketChannel;) in Lorg/jruby/ext/socket/SocketType$4;
20150901 155601.117000 D/dalvikvm( 1895): VFY: replacing opcode 0x1f at 0x0000
20150901 155601.118000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155601.118000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155601.118000 W/dalvikvm( 1895): VFY: unable to find class referenced in signature (Ljnr/unixsocket/UnixSocketChannel;)
20150901 155601.118000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155601.118000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155601.118000 I/dalvikvm( 1895): Could not find method jnr.unixsocket.UnixSocketChannel.shutdownInput, referenced from method org.jruby.ext.socket.SocketType$4.shutdownInput
20150901 155601.118000 W/dalvikvm( 1895): VFY: unable to resolve virtual method 10686: Ljnr/unixsocket/UnixSocketChannel;.shutdownInput ()V
20150901 155601.118000 D/dalvikvm( 1895): VFY: replacing opcode 0x6e at 0x0004
20150901 155601.118000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155601.118000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155601.118000 W/dalvikvm( 1895): VFY: unable to find class referenced in signature (Ljnr/unixsocket/UnixSocketChannel;)
20150901 155601.118000 W/dalvikvm( 1895): Unable to resolve superclass of Ljnr/unixsocket/UnixSocketChannel; (1226)
20150901 155601.118000 W/dalvikvm( 1895): Link of class 'Ljnr/unixsocket/UnixSocketChannel;' failed
20150901 155601.118000 I/dalvikvm( 1895): Could not find method jnr.unixsocket.UnixSocketChannel.shutdownOutput, referenced from method org.jruby.ext.socket.SocketType$4.shutdownOutput
20150901 155601.118000 W/dalvikvm( 1895): VFY: unable to resolve virtual method 10687: Ljnr/unixsocket/UnixSocketChannel;.shutdownOutput ()V
20150901 155601.123000 D/dalvikvm( 1895): VFY: replacing opcode 0x6e at 0x0004
----

== Debugging

Open another shell (with same ruby and gems).

=== Communication

Debugger TCP ports should be forwarded from the connected device or emulator to host system. It is also possible to debug remotely over a network, the device IP address is required, see ruby-debug docs for details.

[source,shell]
----
$ adb forward tcp:8989 tcp:8989
$ adb forward tcp:8990 tcp:8990
$ adb forward --list
----
----
emulator-5554 tcp:8989 tcp:8989
emulator-5554 tcp:8990 tcp:8990
----

=== Debugger client

Start debugger client, verify it connects to application remote debugger.

[source,shell]
----
$ rdebug --client
----
----
Connected.
(rdb:4) _
----

=== Debugger sessions

Example debugger sessions with this tutorial Ruboto app.

==== Session in onCreate method.

The first debugger session occurs in the debugger thread in the _onCreate_ method.

----
Connected.
jar:file:/data/app/net.iqeo.debugging-1.apk!/debugging_activity.rb:21
puts "onCreate: debugger session begin"
(rdb:4) list
[16, 25] in jar:file:/data/app/net.iqeo.debugging-1.apk!/debugging_activity.rb
   16    Debugger.wait_connection = true
   17    Debugger.start_remote         
   18
   19    Thread.start do
   20      debugger
=> 21      puts "onCreate: debugger session begin"
   22      set_title 'Degugging Mr Ruboto!'
   23      puts "onCreate: debugger session end"
   24    end.join
   25
(rdb:4) display self.title
1: self.title = Domo arigato, Mr Ruboto!
(rdb:4) next
1: self.title = Domo arigato, Mr Ruboto!
jar:file:/data/app/net.iqeo.debugging-1.apk!/debugging_activity.rb:22
set_title 'Degugging Mr Ruboto!'
(rdb:4) next
1: self.title = Degugging Mr Ruboto!
jar:file:/data/app/net.iqeo.debugging-1.apk!/debugging_activity.rb:23
puts "onCreate: debugger session end"
(rdb:4) next
1: self.title = Degugging Mr Ruboto!
----

Corresponding lines in log.
----
20150901 155652.553000 I/System.out( 1895): onCreate: debugger session begin
20150901 155709.494000 I/System.out( 1895): onCreate: debugger session end
----

When the debugger thread finishes the onCreate method resumes and the debugger client is non-responsive.

==== Session in butterfly method

Click the button. The second debugger sessions occurs in the _butterfly_ event handler method.

Android may pop up an ANR (Application Not Responding) dialog after a while in the debugger session. Just click _Wait_ to continue.

----
jar:file:/data/app/net.iqeo.debugging-1.apk!/debugging_activity.rb:43
puts "butterfly: debugger session begin"
(rdb:6) display
1: self.title = Degugging Mr Ruboto!
(rdb:6) display @text_view.text
2: @text_view.text = What hath Matz wrought!
(rdb:6) display
1: self.title = Degugging Mr Ruboto!
2: @text_view.text = What hath Matz wrought!
(rdb:6) next
1: self.title = Degugging Mr Ruboto!
2: @text_view.text = What hath Matz wrought!
jar:file:/data/app/net.iqeo.debugging-1.apk!/debugging_activity.rb:44
@text_view.text = 'Butterfly debugged!'
(rdb:6) next
1: self.title = Degugging Mr Ruboto!
2: @text_view.text = Butterfly debugged!
jar:file:/data/app/net.iqeo.debugging-1.apk!/debugging_activity.rb:45
puts "butterfly: debugger session end"
(rdb:6) eval self.title = "It works."
CalledFromWrongThreadException Exception: Only the original thread that created a view hierarchy can touch its views.
(rdb:6) eval run_on_ui_thread { self.title = "It works." }
nil
(rdb:6) display
1: self.title = It works.
2: @text_view.text = Butterfly debugged!
(rdb:6) next
----

Corresponding lines in log.
----
20150901 155811.635000 I/System.out( 1895): butterfly: debugger session begin
20150901 155920.081000 I/System.out( 1895): butterfly: debugger session end
----

== Things to do

* PRs for changes to ruboto, as changes are made in distributed gems this tutorial can be simplified.
* Suppress ANRs while debugging ?
* Start application JRuby with --debug ?
* Can the debugger client remain active and be used to inspect and change variables while UI or other application threads are running ?
* Experiment with ruby-debug-ide, debugging from an IDE may be possible. 

